"use strict";(self.webpackChunk_constructor_io_constructorio_ui_quizzes=self.webpackChunk_constructor_io_constructorio_ui_quizzes||[]).push([[981],{"./node_modules/@mdx-js/react/lib/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{NF:()=>withMDXComponents,Zo:()=>MDXProvider,ah:()=>useMDXComponents,pC:()=>MDXContext});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js");const MDXContext=react__WEBPACK_IMPORTED_MODULE_0__.createContext({});function withMDXComponents(Component){return function boundMDXComponent(props){const allComponents=useMDXComponents(props.components);return react__WEBPACK_IMPORTED_MODULE_0__.createElement(Component,{...props,allComponents})}}function useMDXComponents(components){const contextComponents=react__WEBPACK_IMPORTED_MODULE_0__.useContext(MDXContext);return react__WEBPACK_IMPORTED_MODULE_0__.useMemo((()=>"function"==typeof components?components(contextComponents):{...contextComponents,...components}),[contextComponents,components])}const emptyObject={};function MDXProvider({components,children,disableParentContext}){let allComponents;return allComponents=disableParentContext?"function"==typeof components?components({}):components||emptyObject:useMDXComponents(components),react__WEBPACK_IMPORTED_MODULE_0__.createElement(MDXContext.Provider,{value:allComponents},children)}},"./src/stories/Quiz/Hooks/Docs/Usage Examples.mdx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{default:()=>Usage_Examples});__webpack_require__("./node_modules/react/index.js");var jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js"),lib=__webpack_require__("./node_modules/@mdx-js/react/lib/index.js"),dist=__webpack_require__("./node_modules/@storybook/blocks/dist/index.mjs"),HooksStories_stories=__webpack_require__("./src/stories/Quiz/Hooks/HooksStories.stories.tsx");function _createMdxContent(props){return(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsx)(dist.h_,{of:HooksStories_stories}),"\n",(0,jsx_runtime.jsx)(dist.Dx,{children:"useCioQuiz Usage Examples"}),"\n",(0,jsx_runtime.jsx)(dist.UG,{children:"### Code Example\nFull hook usage example\n\n```jsx\n const {\n    state,\n    getOpenTextInputProps,\n    getNextQuestionButtonProps,\n    getPreviousQuestionButtonProps,\n    getQuizImageProps,\n    getSelectQuestionImageProps,\n    getSelectInputProps,\n    getResetQuizButtonProps,\n    getQuizResultButtonProps,\n    getAddToCartButtonProps,\n    getShareResultsButtonProps,\n  } = useCioQuiz(args);\n\n  if (state.quiz.requestState === 'SUCCESS') {\n    const quizResults = state.quiz.results?.response?.results;\n    const numberOfResults = quizResults.length;\n    const zeroResults = !numberOfResults;\n    const resultsTitle = zeroResults ? state?.quiz.resultsConfig?.desktop?.title.text || 'Here are your results' : '';\n    const resultsDescription = state?.quiz.resultsConfig?.desktop?.description.text || '';\n    const matchedOptions = state.quiz.matchedOptions || [];\n\n    // Quiz Results\n    if (quizResults) {\n      return (\n        <div className='cio-quiz'>\n          <div className='cio-results-container'>\n             {!zeroResults && \n              <div className='cio-results-title-container'>\n                <h1 className='cio-results-title'>{resultsTitle}</h1>\n                <p className='cio-results-description'>{resultsDescription}</p>\n              </div>\n            }\n            {!zeroResults && \n              <div className='cio-results-filter-and-redo-container cio-results-button-group'>\n                <div className='cio-results-filter-container'>\n                  {!!matchedOptions.length && (\n                    <p className='cio-results-explanation'>\n                      Based on your answers <span>{matchedOptions.join(', ')}</span> we recommend these\n                      matches.\n                    </p>\n                  )}\n                </div>\n                <div className='cio-results-number-and-share-button-group'>\n                  {numberOfResults} {numberOfResults === 1 ? 'result' : 'results'}\n                  <button {...getShareResultsButtonProps()} type='button'>\n                    <ShareSVG />\n                    <span>Share Results</span>\n                  </button>\n                </div>\n              </div>\n            }\n            <div className='cio-results'>\n              {!zeroResults &&\n                quizResults.map((result, i) => (\n                  <div className='cio-result-card'>\n                    <div\n                      {...getQuizResultButtonProps({\n                        result,\n                        position: i,\n                      })}>\n                      <div className='cio-result-card-image'>\n                        <img src={result.data?.image_url} alt='product' />\n                      </div>\n                      <div className='cio-result-card-text'>\n                        <p className='cio-result-card-title'>{result.value}</p>\n                        <div className='cio-result-card-prices'>\n                          {result?.data?.price && (\n                            <span className='cio-result-card-sale-price'>${result.data.price}</span>\n                          )}\n                          {result?.data?.price && (\n                            <span\n                              className={`cio-result-card-regular-price${\n                                result.data.price ? '--strike-through' : ''\n                              }`}>\n                              ${result.data.price}\n                            </span>\n                          )}\n                        </div>\n                      </div>\n                      <button {...getAddToCartButtonProps(result, result?.data?.price)}>\n                        Add to Cart\n                      </button>\n                    </div>\n                    {!zeroResults &&\n                      <div className='cio-redo-button-container'>\n                        <button {...getResetQuizButtonProps('secondary')}>\n                          <RedoSVG />\n                          <span>retake</span>\n                        </button>\n                      </div>\n                    }\n                  </div>\n                ))}\n                  \n            </div>\n\n            {zeroResults && (\n              <div className='cio-zero-results'>\n                <h3 className='cio-zero-results-subtitle'>\n                  Sorry, we couldnâ€™t find products that perfectly match your preferences.\n                </h3>\n                <div className='cio-button-container'>\n                  <button {...getResetQuizButtonProps()}>Try Again</button>\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n      );\n    }\n\n    const { currentQuestion } = state.quiz;\n    const currentQuestionData = currentQuestion?.next_question;\n    if (currentQuestionData) {\n      // Open Text Question\n      if (currentQuestion.isOpenQuestion) {\n        return (\n          <div className='cio-quiz'>\n            <div className='cio-container--with-image cio-open-text-question-container--with-image'>\n              {currentQuestionData.images?.primary_url && (\n                <span className='cio-question-image-container'>\n                  <img {...getQuizImageProps()} className='cio-question-image' />\n                </span>\n              )}\n              <div className='cio-question-content'>\n                <h1 className='cio-question-title'>{currentQuestionData.title}</h1>\n                <p className='cio-question-description'>{currentQuestionData.description}</p>\n                <input {...getOpenTextInputProps()} />\n                <div className='cio-question-buttons-container'>\n                  <button {...getPreviousQuestionButtonProps()}>Back</button>\n                  <div className='cio-button-container'>\n                    <button {...getNextQuestionButtonProps()}>Continue</button>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        );\n      }\n\n      // Cover Question\n      if (currentQuestion.isCoverQuestion) {\n        return (\n          <div className='cio-quiz'>\n            <div className='cio-container--with-image cio-cover-question-container--with-image'>\n              {currentQuestionData.images?.primary_url && (\n                <span className='cio-question-image-container'>\n                  <img {...getQuizImageProps()} className='cio-question-image' />\n                </span>\n              )}\n              <div className='cio-question-content'>\n                <h1 className='cio-question-title'>{currentQuestionData.title}</h1>\n                <p className='cio-question-description'>{currentQuestionData.description}</p>\n                <div className='cio-question-buttons-container'>\n                  <button {...getPreviousQuestionButtonProps()}>Back</button>\n                  <div className='cio-button-container'>\n                    <button {...getNextQuestionButtonProps()}>Continue</button>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        );\n      }\n\n      // Select Question\n      if (currentQuestion.isSelectQuestion) {\n        return (\n          <div className='cio-quiz'>\n            <div className='cio-select-question-container'>\n              <div className='cio-select-question-text'>\n                <h1>{currentQuestionData.title}</h1>\n                <p>{currentQuestionData.description}</p>\n              </div>\n              <div className='cio-question-options-container'>\n                {currentQuestionData.options.map((option: QuestionOption) => (\n                  <div {...getSelectInputProps(option)}>\n                    {option.images ? <img {...getSelectQuestionImageProps(option)} /> : ''}\n                    <div className='cio-question-option-value'>{option.value}</div>\n                  </div>\n                ))}\n              </div>\n\n              <div className='cio-question-buttons-container'>\n                <button {...getPreviousQuestionButtonProps()}>Back</button>\n                <div className='cio-button-container'>\n                  <button {...getNextQuestionButtonProps()}>Continue</button>\n                </div>\n              </div>\n            </div>\n          </div>\n        );\n      }\n    }\n  }\n  return null;\n```"})]})}const Usage_Examples=function MDXContent(props={}){const{wrapper:MDXLayout}=Object.assign({},(0,lib.ah)(),props.components);return MDXLayout?(0,jsx_runtime.jsx)(MDXLayout,Object.assign({},props,{children:(0,jsx_runtime.jsx)(_createMdxContent,props)})):_createMdxContent()}}}]);