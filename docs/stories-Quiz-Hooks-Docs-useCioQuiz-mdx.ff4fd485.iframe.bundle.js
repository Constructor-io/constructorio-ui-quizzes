"use strict";(self.webpackChunk_constructor_io_constructorio_ui_quizzes=self.webpackChunk_constructor_io_constructorio_ui_quizzes||[]).push([[608],{"./node_modules/@mdx-js/react/lib/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{NF:()=>withMDXComponents,Zo:()=>MDXProvider,ah:()=>useMDXComponents,pC:()=>MDXContext});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js");const MDXContext=react__WEBPACK_IMPORTED_MODULE_0__.createContext({});function withMDXComponents(Component){return function boundMDXComponent(props){const allComponents=useMDXComponents(props.components);return react__WEBPACK_IMPORTED_MODULE_0__.createElement(Component,{...props,allComponents})}}function useMDXComponents(components){const contextComponents=react__WEBPACK_IMPORTED_MODULE_0__.useContext(MDXContext);return react__WEBPACK_IMPORTED_MODULE_0__.useMemo((()=>"function"==typeof components?components(contextComponents):{...contextComponents,...components}),[contextComponents,components])}const emptyObject={};function MDXProvider({components,children,disableParentContext}){let allComponents;return allComponents=disableParentContext?"function"==typeof components?components({}):components||emptyObject:useMDXComponents(components),react__WEBPACK_IMPORTED_MODULE_0__.createElement(MDXContext.Provider,{value:allComponents},children)}},"./src/stories/Quiz/Hooks/Docs/useCioQuiz.mdx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{default:()=>useCioQuiz});__webpack_require__("./node_modules/react/index.js");var jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js"),lib=__webpack_require__("./node_modules/@mdx-js/react/lib/index.js"),dist=__webpack_require__("./node_modules/@storybook/blocks/dist/index.mjs"),HooksStories_stories=__webpack_require__("./src/stories/Quiz/Hooks/HooksStories.stories.tsx");function _createMdxContent(props){const _components=Object.assign({h1:"h1",a:"a",blockquote:"blockquote",p:"p",h2:"h2",h3:"h3"},(0,lib.ah)(),props.components);return(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsx)(dist.h_,{of:HooksStories_stories,name:"Documentation"}),"\n",(0,jsx_runtime.jsx)(_components.h1,{id:"usecioquiz",children:"useCioQuiz"}),"\n",(0,jsx_runtime.jsxs)("p",{children:["Hook takes ",(0,jsx_runtime.jsx)(_components.a,{href:"#args",children:"args"})," as a parameter and returning props giving you complete control over your UI."]}),"\n",(0,jsx_runtime.jsxs)(_components.blockquote,{children:["\n",(0,jsx_runtime.jsx)(_components.p,{children:"The hook useCioQuiz also returns a number of prop getters that enable you to quickly obtain the props you need for certain HTML elements, allowing you to easily get the full benefit of Constructor's tracking and styling without any hassle."}),"\n"]}),"\n",(0,jsx_runtime.jsxs)(_components.blockquote,{children:["\n",(0,jsx_runtime.jsx)(_components.p,{children:"Note: Any callbacks passed when calling the useCioQuiz hook, will also be returned as part of the props."}),"\n"]}),"\n",(0,jsx_runtime.jsx)(_components.h2,{id:"returns",children:"Returns"}),"\n","\n",(0,jsx_runtime.jsx)(dist.UG,{children:"### state\n\n>Quiz state. This includes quiz answers and info.\n\n  ```jsx\n  const { state } = useCioQuiz(args);\n  ```\n\n- `answers`: User entered/selected answers including:\n  \n  | property    | type                                                          | description                                 |\n  |-------------|---------------------------------------------------------------|---------------------------------------------|\n  | inputs      | `[key: string]: {type: string , value: string | string[];}`   | User entered/selected answers inputs |\n  | isLastAnswer| Boolean                                                       | True if it's the last question, False otherwise|\n\n\n- `quiz`: Quiz info including:\n  \n  | property                      | type                                    | description                                                   |\n  | :-----------------------------| :---------------------------------------| :-------------------------------------------------------------|\n  | currentQuestion               | Object                                  | The current question in the quiz.                             |\n  | results                       | Object                                  | The quiz results                                              |\n  | requestState                  | `'STALE'|'LOADING'|'SUCCESS'|'ERROR'`   | The API request state                                         |\n  | versionId                     | string                                  | The quiz version                                              |\n  | sessionId                     | string                                  | The quiz session                                              |\n  | selectedOptionsWithAttributes | string[]                                | The selected options with attributes                          |\n  | matchedOptions                | string[]                                | The selected options with attributed used in fetching results |\n  | resultsConfig                 | Object | null                           | The results page configuration set in the dashboard           |"}),"\n",(0,jsx_runtime.jsx)("hr",{}),"\n","\n",(0,jsx_runtime.jsx)(dist.UG,{children:"### events\n\n> Events to call to trigger constructor events and quiz actions.\n\n  ```jsx\n  const { events } = useCioQuiz(args);\n  ```\n\n  | property          | type                 | description|\n  | :-----------------| ---------------------| :--------- |\n  | nextQuestion      | `function() => void` | Action event to go to the next question in the quiz |\n  | previousQuestion  | `function() => void` | Action event to go to the previous question in the quiz |\n  | resetQuiz         | `function() => void` | Action event to go to the reset the quiz state and go to the first question |\n  | resultClick       | `function(item) => void (item* is the quiz result data)` | Action event to trigger quiz result click events |\n  | addToCart         | `function(e: React.MouseEvent<HTMLElement>, item, price) => void` | Action event to trigger add to cart click events |\n  | addToFavorites    | `function(e: React.MouseEvent<HTMLElement>, item, price) => void` | Action event trigger add to favorites click events |\n  | hydrateQuiz       | `function() => void` | Action event to hydrate the quiz with saved state in session storage on reload |\n  | quizAnswerChanged | `function(payload: string \\| string[] ) => void` | Action event to trigger add to cart click events |\n"}),"\n",(0,jsx_runtime.jsx)("hr",{}),"\n","\n",(0,jsx_runtime.jsx)(dist.UG,{children:"### cioClient\n\n> Constructor IO client instance.\n\n  ```jsx\n  const { cioClient } = useCioQuiz(args);\n  ```\n"}),"\n",(0,jsx_runtime.jsx)("hr",{}),"\n","\n",(0,jsx_runtime.jsx)(dist.UG,{children:"### primaryColorStyles\n\n> HSL values of primary theme colors.\n\n  ```jsx\n  const { primaryColorStyles } = useCioQuiz(args);\n  ```\n\n  | property              | type        | description                     |\n  | :---------------------| :-----------| :------------------------------ |\n  | --primary-color-h | string  | Hue value of hsl() color function       |\n  | --primary-color-s | string  | Saturation value of hsl() color function|\n  | --primary-color-l | string  | Lightness value of hsl() color function |\n"}),"\n",(0,jsx_runtime.jsx)("hr",{}),"\n","\n",(0,jsx_runtime.jsx)(_components.h3,{id:"prop-getters",children:"Prop Getters"}),"\n",(0,jsx_runtime.jsx)(_components.p,{children:"The hook useCioQuiz also returns a number of prop getters that enable you to quickly obtain the props you need for certain HTML elements, allowing you to easily get the full benefit of Constructor's tracking and styling without any hassle."}),"\n",(0,jsx_runtime.jsx)(_components.p,{children:"Note: Any callbacks passed when calling the useCioQuiz hook, will also be returned as part of the props."}),"\n",(0,jsx_runtime.jsx)(dist.UG,{children:"- #### Quiz questions\n\n  - ##### `getOpenTextInputProps`\n\n    This method returns the props that should be applied to an input `<input>` on quiz questions of type OpenText.\n\n    This handles input state, events and styles.\n\n    ```jsx\n    const { getOpenTextInputProps } = useCioQuiz(args);\n\n    const ui = (\n      /* input */\n      <input {...getOpenTextInputProps()} />\n    );\n    ```\n  \n  - ##### `getSelectInputProps`\n  \n    This method should be applied to an element of type `<li>` or `<dev>` on quiz questions of type SelectQuestion.\n\n    This handles selection state, events and styles.\n\n    It is required to pass an `option` to `getSelectInputProps` in order to be applied.\n\n      - `option`: Select question option data that will be selected when the user\n        selects a particular option.\n\n    ```jsx\n    const { getSelectInputProps, state } = useCioQuiz(args);\n    const currentQuestionData = state.quiz?.currentQuestion?.next_question;\n\n    const ui = (\n      <div>\n        {currentQuestionData.options.map((option) => (\n          <div {...getSelectInputProps(option)}>\n            <div className='cio-question-option-value'>{option.value}</div>\n          </div>\n        ))}\n      </div>\n    );\n    ```\n\n  - ##### `getNextQuestionButtonProps`\n\n    This method should be applied to an element of type `<button>` or `<div>` on any quiz question.\n\n    This handles the styles and the click event for going to the next question.\n\n    ```jsx\n    const { getNextQuestionButtonProps } = useCioQuiz(args);\n\n    const ui = (\n      /* button, dev, ... */\n      <button {...getNextQuestionButtonProps()}>Continue</button>\n    );\n    ```\n\n  - ##### `getPreviousQuestionButtonProps`\n\n    This method should be applied to an element of type `<button>` or `<div>` on quiz.\n\n    This handles the styles and the click event for going to the previous question.\n\n    ```jsx\n    const { getPreviousQuestionButtonProps } = useCioQuiz(args);\n\n    const ui = (\n      /* button, dev, ... */\n      <button {...getPreviousQuestionButtonProps()}>Back</button>\n    );\n    ```\n\n    \n  - ##### `getSkipQuestionButtonProps`\n\n    This method should be applied to an element of type `<button>` or `<div>` on quiz.\n\n    This handles the styles and the click event for skipping the current question.\n\n    ```jsx\n    const { getSkipQuestionButtonProps } = useCioQuiz(args);\n\n    const ui = (\n      /* button, dev, ... */\n      <button {...getSkipQuestionButtonProps()}>Skip</button>\n    );\n    ```\n\n  - ##### `getResetQuizButtonProps`\n\n    This method should be applied to an element of type `<button>` or `<div>` on quiz.\n\n    This handles resetting the quiz state and going back to the first question of the quiz.\n\n    ```jsx\n    const { getResetQuizButtonProps } = useCioQuiz(args);\n\n    const ui = (\n      /* button, dev, ... */\n      <button {...getResetQuizButtonProps()}>Reset Quiz</button>\n    );\n    ```\n\n  - ##### `getQuizImageProps`\n\n      This method should be applied to an element of type `<image>` or `<div>` on quiz images of any question type.\n\n      ```jsx\n      const { getQuizImageProps } = useCioQuiz(args);\n\n      const ui = (\n        <img {...getQuizImageProps()} className='cio-question-image' />\n      );\n      ```\n"}),"\n",(0,jsx_runtime.jsx)("hr",{}),"\n",(0,jsx_runtime.jsx)(dist.UG,{children:"- #### Quiz results\n\n  - ##### `getAddToCartButtonProps`\n\n    This method should be applied to an element of type `<button>` or `<div>` on quiz results page on quiz result item.\n\n    It is required to pass an `item` and `price` to `getAddToCartButtonProps` in order to apply the logic and tracking.\n\n    - `item`: Result item of the quiz that will be selected to be tracked when the user\n          clicks Add to cart button.\n    - `price`: Price of the result that will be sent with the tracking event.\n\n      ```jsx\n      const { getAddToCartButtonProps } = useCioQuiz(args);\n\n      const ui = (\n        /* button, dev, ... */\n        <button {...getAddToCartButtonProps(item, price)}>Add to Cart</button>\n      );\n      ```\n\n  - ##### `getAddToFavoritesButtonProps`\n\n    This method should be applied to an element of type `<button>` or `<div>` on any quiz question.\n\n    It is required to pass an `item` and `price` to `getAddToFavoritesButtonProps` in order to apply the logic and tracking.\n\n    - `item`: Result item of the quiz that will be selected to be tracked when the user\n          clicks Add to favorites button.\n    - `price`: Price of the result that will be sent with the tracking event.\n\n      ```jsx\n      const { getAddToFavoritesButtonProps } = useCioQuiz(args);\n\n      const ui = (\n        /* button, dev, ... */\n        <button {...getAddToCartButtonProps(item, price)}>Add to favorites</button>\n      );\n      ```\n\n  - ##### `getQuizResultButtonProps`\n\n    This method should be applied to a product card container of type `<div>` on quiz results page.\n\n    This handles href, events, and tracking.\n\n    It is required to pass an `item` and `position` to `getQuizResultButtonProps` in order to apply the logic and tracking.\n\n    - `item`: Result item of the quiz that will be selected to be tracked when the user\n      clicks on it.\n    - `position`: Position of the item that will be sent with the tracking event.\n\n      ```jsx\n      const { getQuizResultButtonProps, state } = useCioQuiz(args);\n      const quizResults = state.quiz.results?.response?.results;\n\n      const ui = (\n        <div>\n          {quizResults.map((item, i) => (\n            <div\n              {...getQuizResultButtonProps({\n                result,\n                position: i,\n              })}>\n              <p>{item.value}</p>\n            </div>\n          ))}\n        </div>\n      );\n      ```\n\n  - ##### `getQuizResultLinkProps`\n\n    This method should be applied to a product card container of type link `<a>` on quiz results page.\n\n    This handles href, events, and tracking.\n\n    It is required to pass an `item` and `position` to `getQuizResultLinkProps` in order to apply the logic and tracking.\n\n    - `item`: Result item of the quiz that will be selected to be tracked when the user\n          clicks on it.\n    - `position`: Position of the item that will be sent with the tracking event.\n\n      ```jsx\n      const { getQuizResultLinkProps, state } = useCioQuiz(args);\n      const quizResults = state.quiz.results?.response?.results;\n\n      const ui = (\n        <div>\n          {quizResults.map((item, i) => (\n            <a\n              {...getQuizResultLinkProps({\n                result,\n                position: i,\n              })}>\n              <p>{item.value}</p>\n            </a>\n          ))}\n        </div>\n      );\n      ```\n  \n  - ##### `getHydrateQuizButtonProps`\n\n    This method should be applied to an element of type `<button>` or `<div>` to hydrate the quiz with saved state between reloads.\n\n    ```jsx\n    const { getHydrateQuizButtonProps } = useCioQuiz(args);\n\n    const ui = (\n      <button {...getHydrateQuizButtonProps()}>Hydrate quiz</button>\n    );\n    ```\n"}),"\n",(0,jsx_runtime.jsx)("hr",{})]})}const useCioQuiz=function MDXContent(props={}){const{wrapper:MDXLayout}=Object.assign({},(0,lib.ah)(),props.components);return MDXLayout?(0,jsx_runtime.jsx)(MDXLayout,Object.assign({},props,{children:(0,jsx_runtime.jsx)(_createMdxContent,props)})):_createMdxContent(props)}}}]);